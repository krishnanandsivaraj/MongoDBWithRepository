Team

I would like to suggest improvements in the ecapp architectural team.  The contents in this mail is not to target anybody or to complain any individual. I come from a backgroud where I have written and rewritten product/project from the scratch.  I would like to suggest some improvements in the architecte area to make this project a success.  Please read completely.

The role of an architect in global
The role of an architect is to provide high level technical design decisions including software coding standards, tools and platforms.  The role also requires creating a solid application framework considering each developer (end user) in mind. There are certain qualities like domain modeling, data modeling, refactoring and being thorough in the technology they work makes them sustain in their job.  The past companies I worked with (services/product) had strong people who advocate technology inclusion, logical thinkers and  had people who convert business cases into technical use cases (UML, Flow Diagrams, State Diagrams and other architectural diagrams).  When I was a developer ( SE or Analyst/Specialist level in verizon), I had my use case (HLD) ready before developing any functionality along with the framework.

The role of an architect at present
I have been with Verizon for about 11 months and I don't know about all architects in the company but I can say about the architects (senior level) I am working with.  I have joined the ecapp team last week and I have been involved in developing the framework. 


These are the points we need to consider to say it as a framework

1) We need a definite plan on the list of things to do.  The list sent for the framework is not a HLD (no UML, flow diagrams).  The role of an architect is to convert business cases into technical use cases (technical diagrams and documents to explain how the systems should behave).  At present they still think this like POC.  They have good managerial skills but their role at present does not require that.  Developers may not have confidence on what they will do and what will be the business impact of it. We choose the right technology for the business and code should also be for business.

2) Unit testing is ignored at design time (framework development).  I am saying it because we claim the framework is complete.  Unit testing involves breaking a big function into so many small components and applying architectural principles like SOLID, DRY and YAGNI will only help.  If this is not considered at design time, developers have to rewrite their code already written to make unit testing happen.  The architect team is ignorant on these at present.  Architect team is responsible for solving issues with unit testing.  Developers should write it to check their functionality everyday (CI/CD modal mandatory).

3) Absence of OOPS Concepts.  There is a rest service code that requires the developer to repeat the same code every time they want to use it.  If there are twelve developers taking one hour per day to do that 12 hours wasted here.  As as architect, we can create a common method and avoid code duplication.  We can reduce the time to 5minutes totally. (The framework at present is a google copy paste).  The purpose of using .NET Core and C# is its reusability.  Concepts like commonality, variability, reusability, extendabilty and maintainability are not considered.  

4) EcApp development/architect team should be assigned SMEs.  When I started my past project MVC was new to the entire industry but trending now.  We did not get any class room training but my architects/devlopers at that time were very positive and formed a forum and we learnt it ourselves.  We need people who are energetic and interested to learn things and class room trainings are waste of time.  Each one of us (including developers) should be assigned a technology to learn apart from their work.  One can learn about .NET Core the other Angular2, other on TypeScript and share it in a 30 minutes session everyday.  At present it is very hard for developers like me to convince architects (senior level) for new things.  They ignore because they don't know it and not willing to also.  I struggled to implement WebApi during POC that saved lots of time during Angular conversion but was completely opposed at the beginning.  We need to form a wall between managing and architecting at senior level.  Writing code should create interest in developers to use the technology more and architects are  the guiding lights for it.  At present even architects have no clue on everything in the framework. Switching to older technologies will have huge maintainance costs as the entire .net framework is going cross-platform. The role of an architect never stops with standing behind a developer and pusing him/her for getting things done and communicating to onshore on developers work.  It is managerial.  Developers can explain their module to onshore given prior information he/she has to present.  I did not get onshore visibility during POC.


5) Coming early to office and leaving early so that they learn new concepts at home.  Some of us come by 12-1pm and leave late.  After midnight they are involved in other project activities with onshore responding their calls.  They have a very personal bonding with onshore and it distracts the framework/ecapp development.  The framework development was informed before three months and not much attention was given to it by the architect who develops it.  The result is we did not produce results.  It took me two days to come up with the UI. Lots of improvements required in the framework.

6)  Thinking before saying no to something.  When some technical task is assigned, people should learn the technology end to end before saying it is not possible or atleast they should say what are all the challanges.  The challanges I would say is because of infrastructre and not because of the technology.  If not learning end to end atleast opening the offical documentation of the technology should help.

7)  Using GIT/Stash is not even happening from the architect level.  Jeffrey went and created the repo for the team.  The entire framework code was in file share which is a 20 year old technology.  Still they use it not understanding the importance of git.  We need to shut down the file share server to avoid it soon.

8) Hiring contracters will help complete the project but without solid known architects in technolgy, the application will look like a freelancing project not an enterprise application.  Our application will be buggy in few months of development (experienced this).

Till the moment I started coding, there were hardships, ups and downs but overcome all by knowing things with positivity (talking to my experience).  Projects/Products fail not because of technology but because of distractions,ignorance and non smart people who dont want to learn things in their personal life.  We need to be technically more positive and well educated (self-learn) before doing our everyday technical work irrespective of our role to survive in this  field.